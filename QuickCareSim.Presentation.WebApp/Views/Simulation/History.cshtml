@model List<QuickCareSim.Application.ViewModels.UrgencyRoom.SimulationResultViewModel>

@{
    ViewData["Title"] = "Historial de Simulaciones";
}

<div class="container mt-5">
    <div id="toast-container" class="position-fixed top-0 end-0 p-3" style="z-index: 1100;"></div>

    <h2 class="text-primary mb-4"><i class="bi bi-journal-bookmark-fill me-2"></i>Historial de Simulaciones</h2>

    <div class="d-flex justify-content-end mb-3 gap-2">
        <a asp-action="ExportGlobalMetricsExcel" class="btn btn-success">
            <i class="bi bi-bar-chart-fill me-1"></i> Descargar Informe Global
        </a>
        <a asp-action="ExportStrategyComparisonExcel" class="btn btn-outline-primary">
            <i class="bi bi-graph-up-arrow me-1"></i> Comparar Estrategias
        </a>
    </div>

    <div class="table-responsive">
        <table class="table table-striped table-bordered align-middle text-center">
            <thead class="table-dark">
                <tr>
                    <th>ID</th>
                    <th>Fecha</th>
                    <th>Estrategia</th>
                    <th>Modo</th>
                    <th>Pacientes</th>
                    <th>Doctores</th>
                    <th>Tiempo Real (s)</th>
                    <th>Speedup</th>
                    <th>Eficiencia</th>
                    <th>Acciones</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var sim in Model)
                {
                    var realTime = Math.Round(sim.RealExecutionTimeSeconds, 2);
                    var showStats = realTime > 0 && sim.ExecutionMode != "Sequential";

                    <tr>
                        <td>@sim.Id</td>
                        <td>@sim.RunAt.ToString("g")</td>
                        <td>@sim.StrategyUsed</td>
                        <td>@sim.ExecutionMode</td>
                        <td>@sim.TotalPatients</td>
                        <td>@sim.TotalDoctors</td>
                        <td>
                            @(realTime == 0
                                ? Html.Raw("<span class='badge bg-warning text-dark'>No registrado</span>")
                                : realTime.ToString("0.00"))
                        </td>
                        <td>@(showStats ? sim.Speedup?.ToString("0.00") ?? "—" : "N/D")</td>
                        <td>@(showStats ? sim.Efficiency?.ToString("0.00") ?? "—" : "N/D")</td>
                        <td>
                            <div class="d-flex flex-wrap gap-1 justify-content-center">
                                <form class="retry-form" data-id="@sim.Id" method="post" asp-action="RetrySimulation" asp-route-id="@sim.Id">
                                    @Html.AntiForgeryToken()
                                    <button type="submit" class="btn btn-sm btn-outline-warning d-flex align-items-center gap-1" id="retry-btn-@sim.Id">
                                        <i class="bi bi-arrow-clockwise"></i>
                                        <span>Reintentar</span>
                                    </button>
                                    <div id="spinner-@sim.Id" class="spinner-border spinner-border-sm text-warning d-none" role="status">
                                        <span class="visually-hidden">Cargando...</span>
                                    </div>
                                </form>

                                <form asp-action="DeleteSimulation" method="post" asp-route-id="@sim.Id"
                                      onsubmit="return confirm('¿Seguro que deseas eliminar esta simulación?');">
                                    <button type="submit" class="btn btn-sm btn-outline-danger" title="Eliminar Simulación">
                                        <i class="bi bi-trash3"></i>
                                    </button>
                                </form>

                                <a asp-action="Result" asp-route-id="@sim.Id" class="btn btn-sm btn-outline-primary" title="Ver Detalles">
                                    <i class="bi bi-eye-fill"></i>
                                </a>
                            </div>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>

@section Scripts {
    <script>
        const runningSimulations = new Set();

        document.querySelectorAll('.retry-form').forEach(form => {
            form.addEventListener('submit', async function (e) {
                e.preventDefault();

                const id = this.getAttribute('data-id');
                const btn = document.getElementById(`retry-btn-${id}`);
                const spinner = document.getElementById(`spinner-${id}`);
                const formData = new FormData(this);
                const token = formData.get('__RequestVerificationToken');

                btn.disabled = true;
                spinner.classList.remove("d-none");
                runningSimulations.add(id);

                try {
                    const response = await fetch(this.action, {
                        method: 'POST',
                        body: formData,
                        headers: {
                            'RequestVerificationToken': token
                        }
                    });

                    const contentType = response.headers.get("content-type") || "";
                    const isJson = contentType.includes("application/json");

                    if (!response.ok) {
                        const error = isJson ? await response.json() : { message: "Ocurrió un error inesperado." };
                        showToast(error.message || "Error desconocido");
                    } else if (isJson) {
                        const result = await response.json();
                        if (result.error) {
                            showToast(result.error);
                        }
                    }

                } catch (err) {
                    showToast("Error de conexión con el servidor.");
                } finally {
                    btn.disabled = false;
                    spinner.classList.add("d-none");
                    runningSimulations.delete(id);
                }
            });
        });

        window.addEventListener("beforeunload", function (e) {
            if (runningSimulations.size > 0) {
                const message = "Hay simulaciones en curso. ¿Estás seguro de que deseas salir?";
                e.preventDefault();
                e.returnValue = message;
                return message;
            }
        });

        function showToast(message) {
            const container = document.getElementById("toast-container");
            const toast = document.createElement('div');
            toast.className = "alert alert-danger alert-dismissible fade show mt-2";
            toast.innerHTML = `
                <i class="bi bi-x-circle-fill me-2"></i>${message}
                <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
            `;
            container.appendChild(toast);

            setTimeout(() => {
                toast.classList.remove("show");
                toast.classList.add("fade");
                setTimeout(() => toast.remove(), 500);
            }, 8000);
        }
    </script>
}